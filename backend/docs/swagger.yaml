basePath: /api
definitions:
  domain.Inventory:
    properties:
      description:
        type: string
      inventory_type:
        $ref: '#/definitions/domain.InventoryType'
      last_updated:
        type: string
      name:
        type: string
      owner_id:
        type: integer
      quantity:
        type: integer
    type: object
  domain.InventoryType:
    enum:
    - CARRO
    - MOTO
    - BICICLETA
    - SCOOTER
    - PET
    type: string
    x-enum-varnames:
    - InventoryTypeCar
    - InventoryTypeBike
    - InventoryTypeBicycle
    - InventoryTypeScooter
    - InventoryTypePet
  domain.Package:
    properties:
      delivered_at:
        type: string
      delivered_to_id:
        type: integer
      description:
        type: string
      quantity:
        type: integer
      received_at:
        type: string
      resident_id:
        type: integer
      status:
        $ref: '#/definitions/domain.PackageStatus'
    type: object
  domain.PackageStatus:
    enum:
    - PENDENTE
    - ENTREGUE
    - EXTRAVIADO
    type: string
    x-enum-varnames:
    - PackagePending
    - PackageDelivered
    - PackageLost
  domain.PaymentMethod:
    enum:
    - PIX
    - BOLETO
    type: string
    x-enum-varnames:
    - PaymentMethodPix
    - PaymentMethodBoleto
  domain.PaymentStatus:
    enum:
    - PAGAMENTO_PENDENTE
    - PAGO
    - REEMBOLSADO
    type: string
    x-enum-varnames:
    - PaymentPending
    - PaymentPaid
    - PaymentRefunded
  domain.Reminder:
    properties:
      channel:
        $ref: '#/definitions/domain.ReminderChannel'
      package_id:
        type: integer
      recipient:
        type: string
      reservation_id:
        type: integer
      scheduled_at:
        type: string
      sent_at:
        type: string
      status:
        $ref: '#/definitions/domain.ReminderStatus'
    type: object
  domain.ReminderChannel:
    enum:
    - WHATSAPP
    - EMAIL
    - SMS
    - TELEGRAM
    - INSTAGRAM
    - FACEBOOK
    - DISCORD
    type: string
    x-enum-varnames:
    - ReminderChannelWhatsApp
    - ReminderChannelEmail
    - ReminderChannelSMS
    - ReminderChannelTelegram
    - ReminderChannelInstagram
    - ReminderChannelFacebook
    - ReminderChannelDiscord
  domain.ReminderStatus:
    enum:
    - PENDING
    - SENT
    - FAILED
    - CANCELLED
    type: string
    x-enum-varnames:
    - ReminderStatusPending
    - ReminderStatusSent
    - ReminderStatusFailed
    - ReminderStatusCancelled
  domain.Reservation:
    properties:
      cancellation_reason:
        type: string
      description:
        type: string
      end_time:
        type: string
      keys_returned_at:
        type: string
      keys_taken_at:
        type: string
      payment_amount:
        type: number
      payment_date:
        type: string
      payment_method:
        $ref: '#/definitions/domain.PaymentMethod'
      payment_status:
        $ref: '#/definitions/domain.PaymentStatus'
      resident_id:
        type: integer
      space:
        $ref: '#/definitions/domain.SpaceType'
      start_time:
        type: string
      status:
        $ref: '#/definitions/domain.ReservationStatus'
    type: object
  domain.ReservationStatus:
    enum:
    - PENDENTE
    - CONFIRMADA
    - CANCELADA
    - CHAVES_RETIRADAS
    - CHAVES_DEVOLVIDAS
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusConfirmed
    - StatusCancelled
    - StatusKeysTaken
    - StatusKeysReturned
  domain.SpaceType:
    enum:
    - SALAO_1
    - SALAO_2
    type: string
    x-enum-varnames:
    - Salon1
    - Salon2
host: localhost:8080
info:
  contact:
    email: support@portarius.com
    name: API Support
    url: http://www.portarius.com/support
  description: API for managing a package delivery system in a residential building
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Portarius API
  version: "1.0"
paths:
  /inventory:
    get:
      consumes:
      - application/json
      description: Get paginated list of all inventory items with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Sort field
        enum:
        - name
        - quantity
        - created_at
        in: query
        name: sortBy
        type: string
      - default: asc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Inventory'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: List all inventory items
      tags:
      - Inventory
    post:
      consumes:
      - application/json
      description: Create a new inventory item
      parameters:
      - description: Inventory item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/domain.Inventory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Inventory'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create a new inventory item
      tags:
      - Inventory
  /inventory/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an inventory item
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete an inventory item
      tags:
      - Inventory
    get:
      consumes:
      - application/json
      description: Get inventory item by ID
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Inventory'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get inventory item by ID
      tags:
      - Inventory
    put:
      consumes:
      - application/json
      description: Update an inventory item
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: integer
      - description: Inventory item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/domain.Inventory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Inventory'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update an inventory item
      tags:
      - Inventory
  /inventory/import-pets:
    post:
      consumes:
      - application/json
      description: Import pets from CSV file
      parameters:
      - description: CSV file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Import cars from CSV
      tags:
      - Inventory
  /inventory/inventory-types:
    get:
      consumes:
      - application/json
      description: List avaliable inventory types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.InventoryType'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: List inventory types
      tags:
      - Inventory
  /package:
    get:
      consumes:
      - application/json
      description: Get paginated list of all package items with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Sort field
        enum:
        - description
        - status
        - quantity
        - created_at
        in: query
        name: sortBy
        type: string
      - default: asc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Package'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: List all package items
      tags:
      - Package
    post:
      consumes:
      - application/json
      description: Create a new package item
      parameters:
      - description: Package item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/domain.Package'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Package'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create a new package item
      tags:
      - Package
  /package/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an package item
      parameters:
      - description: Package ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete an package item
      tags:
      - Package
    get:
      consumes:
      - application/json
      description: Get package item by ID
      parameters:
      - description: Package ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Package'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get package item by ID
      tags:
      - Package
    put:
      consumes:
      - application/json
      description: Update an package item
      parameters:
      - description: Package ID
        in: path
        name: id
        required: true
        type: integer
      - description: Package item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/domain.Package'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Package'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update an package item
      tags:
      - Package
  /package/{id}/deliver:
    put:
      consumes:
      - application/json
      description: Change the package status
      parameters:
      - description: Package ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Package'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Mark a package as delivered
      tags:
      - Package
  /package/{id}/lost:
    put:
      consumes:
      - application/json
      description: Change the package status
      parameters:
      - description: Package ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Package'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Mark a package as lost
      tags:
      - Package
  /package/status:
    get:
      consumes:
      - application/json
      description: List avaliable package status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.PackageStatus'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: List package status
      tags:
      - Package
  /reminders:
    get:
      consumes:
      - application/json
      description: Get paginated list of all reminders with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      - description: Search by recipient
        in: query
        name: search
        type: string
      - description: Sort field
        enum:
        - recipient
        - scheduled_at
        - sent_at
        - status
        - channel
        - created_at
        in: query
        name: sortBy
        type: string
      - default: asc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reminder'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: List all reminders
      tags:
      - Reminders
    post:
      consumes:
      - application/json
      description: Create a new reminder with recipient, scheduled time, etc.
      parameters:
      - description: Reminder to create
        in: body
        name: reminder
        required: true
        schema:
          $ref: '#/definitions/domain.Reminder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Reminder'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create a new reminder
      tags:
      - Reminders
  /reminders/{id}:
    delete:
      description: Delete a reminder by its ID
      parameters:
      - description: Reminder ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete a reminder
      tags:
      - Reminders
    get:
      description: Get a single reminder by its ID
      parameters:
      - description: Reminder ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reminder'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security:
      - BearerAuth: []
      summary: Get reminder by ID
      tags:
      - Reminders
    put:
      consumes:
      - application/json
      description: Update reminder fields like scheduled time, status, etc.
      parameters:
      - description: Reminder ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated reminder
        in: body
        name: reminder
        required: true
        schema:
          $ref: '#/definitions/domain.Reminder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reminder'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update an existing reminder
      tags:
      - Reminders
  /reminders/channel/{channel}:
    get:
      description: Get a list of reminders filtered by channel
      parameters:
      - description: Reminder channel
        enum:
        - WHATSAPP
        - EMAIL
        - SMS
        - TELEGRAM
        - INSTAGRAM
        - FACEBOOK
        - DISCORD
        in: path
        name: channel
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reminder'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get reminders by channel
      tags:
      - Reminders
  /reminders/package/{packageID}:
    get:
      description: Get a reminder linked to a specific package
      parameters:
      - description: Package ID
        in: path
        name: packageID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reminder'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security:
      - BearerAuth: []
      summary: Get reminder by package ID
      tags:
      - Reminders
  /reminders/pending:
    get:
      description: Get all reminders that are still pending
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reminder'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get reminders with status PENDING
      tags:
      - Reminders
  /reminders/recipient/{recipient}:
    get:
      description: Get all reminders sent to a specific recipient
      parameters:
      - description: Recipient
        in: path
        name: recipient
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reminder'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get reminders by recipient
      tags:
      - Reminders
  /reminders/reminderChannel:
    get:
      description: Returns all supported reminder channels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      security:
      - BearerAuth: []
      summary: List all reminder channels
      tags:
      - Reminders
  /reminders/reminderStatus:
    get:
      description: Returns all possible reminder statuses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      security:
      - BearerAuth: []
      summary: List all reminder statuses
      tags:
      - Reminders
  /reminders/reservation/{reservationID}:
    get:
      description: Get a reminder linked to a specific reservation
      parameters:
      - description: Reservation ID
        in: path
        name: reservationID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reminder'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security:
      - BearerAuth: []
      summary: Get reminder by reservation ID
      tags:
      - Reminders
  /reminders/status/{status}:
    get:
      description: Get a list of reminders filtered by status
      parameters:
      - description: Reminder status
        enum:
        - PENDING
        - SENT
        - FAILED
        - CANCELLED
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reminder'
            type: array
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get reminders by status
      tags:
      - Reminders
  /reservations:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of all reservations
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reservation'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get all reservations
      tags:
      - Reservations
    post:
      consumes:
      - application/json
      description: Creates a new reservation with the provided details
      parameters:
      - description: Reservation data
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/domain.Reservation'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Reservation'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create a new reservation
      tags:
      - Reservations
  /reservations/{id}:
    delete:
      description: Delete a reservation by its ID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete a reservation
      tags:
      - Reservations
    get:
      consumes:
      - application/json
      description: Retrieves a reservation based on its unique ID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reservation'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get a reservation by ID
      tags:
      - Reservations
    put:
      consumes:
      - application/json
      description: Update reservation's time or description
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated data
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/domain.Reservation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reservation'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update a reservation
      tags:
      - Reservations
  /reservations/{id}/cancel:
    put:
      description: Cancel a reservation by setting its status to cancelled and adding
        a cancellation reason
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Cancellation body (only CancellationReason will be used)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.Reservation'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reservation'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Cancel a reservation
      tags:
      - Reservations
  /reservations/{id}/complete:
    put:
      description: Updates the reservation status to "keys returned" (complete)
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reservation'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Mark reservation as complete
      tags:
      - Reservations
  /reservations/{id}/confirm:
    put:
      description: Update the reservation status to confirmed
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reservation'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Confirm a reservation
      tags:
      - Reservations
  /reservations/{id}/confirm-payment:
    put:
      description: Confirm the payment of a reservation, updating payment status,
        amount, date, and reservation status
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Reservation payment details (payment_amount)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.Reservation'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reservation'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Confirm payment for a reservation
      tags:
      - Reservations
  /reservations/{id}/return-keys:
    put:
      description: Marks the keys as returned for a reservation and updates its status
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reservation'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Mark reservation keys as returned
      tags:
      - Reservations
  /reservations/{id}/take-keys:
    put:
      description: Marks the keys as taken for a confirmed reservation and updates
        its status
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reservation'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Mark reservation keys as taken
      tags:
      - Reservations
  /reservations/date-range:
    get:
      description: 'Retrieve all reservations between start_date and end_date (format:
        yyyy-MM-dd)'
      parameters:
      - description: Start date in format yyyy-MM-dd
        in: query
        name: start_date
        required: true
        type: string
      - description: End date in format yyyy-MM-dd
        in: query
        name: end_date
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reservation'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get reservations by date range
      tags:
      - Reservations
  /reservations/import-salon:
    post:
      description: Imports reservations data from a CSV file for salon spaces
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Import salon reservations from CSV
      tags:
      - Reservations
  /reservations/paymentMethods:
    get:
      description: Returns the list of possible payment methods
      produces:
      - application/json
      responses:
        "200":
          description: List of payment methods
          schema:
            items:
              $ref: '#/definitions/domain.PaymentMethod'
            type: array
      summary: List all payment methods
      tags:
      - Reservations
  /reservations/paymentStatuses:
    get:
      description: Returns the list of possible payment statuses
      produces:
      - application/json
      responses:
        "200":
          description: List of payment statuses
          schema:
            items:
              $ref: '#/definitions/domain.PaymentStatus'
            type: array
      summary: List all payment statuses
      tags:
      - Reservations
  /reservations/reservationStatus:
    get:
      description: Returns the list of possible reservation statuses
      produces:
      - application/json
      responses:
        "200":
          description: List of reservation statuses
          schema:
            items:
              $ref: '#/definitions/domain.ReservationStatus'
            type: array
      summary: List all reservation statuses
      tags:
      - Reservations
  /reservations/resident/{residentId}:
    get:
      description: Retrieve all reservations associated with a specific resident
      parameters:
      - description: Resident ID
        in: path
        name: residentId
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reservation'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get reservations by resident ID
      tags:
      - Reservations
  /reservations/space/{space}:
    get:
      description: Retrieve all reservations for a specific space
      parameters:
      - description: Space type
        in: path
        name: space
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reservation'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get reservations by space type
      tags:
      - Reservations
  /reservations/spaceTypes:
    get:
      description: Returns the list of possible space types for reservations
      produces:
      - application/json
      responses:
        "200":
          description: List of space types
          schema:
            items:
              $ref: '#/definitions/domain.SpaceType'
            type: array
      summary: List all space types
      tags:
      - Reservations
  /reservations/status/{status}:
    get:
      description: Retrieve all reservations filtered by their status
      parameters:
      - description: Reservation status
        in: path
        name: status
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reservation'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get reservations by status
      tags:
      - Reservations
  /reservations/upcoming:
    get:
      description: Retrieve all upcoming reservations
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Reservation'
            type: array
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get upcoming reservations
      tags:
      - Reservations
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
