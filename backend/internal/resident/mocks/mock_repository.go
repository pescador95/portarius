// Code generated by MockGen. DO NOT EDIT.
// Source: portarius/resident (interfaces: IResidentRepository)

// Package mock_resident is a generated GoMock package.
package mock_resident

import (
	residentDomain "portarius/internal/resident/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

type MockIResidentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIResidentRepositoryMockRecorder
}

type MockIResidentRepositoryMockRecorder struct {
	mock *MockIResidentRepository
}

func NewMockIResidentRepository(ctrl *gomock.Controller) *MockIResidentRepository {
	mock := &MockIResidentRepository{ctrl: ctrl}
	mock.recorder = &MockIResidentRepositoryMockRecorder{mock}
	return mock
}

func (m *MockIResidentRepository) EXPECT() *MockIResidentRepositoryMockRecorder {
	return m.recorder
}

func (m *MockIResidentRepository) Create(arg0 *residentDomain.Resident) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockIResidentRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIResidentRepository)(nil).Create), arg0)
}

func (m *MockIResidentRepository) Delete(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockIResidentRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIResidentRepository)(nil).Delete), arg0)
}

func (m *MockIResidentRepository) GetAll(page, pageSize int) ([]residentDomain.Resident, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]residentDomain.Resident)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockIResidentRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIResidentRepository)(nil).GetAll))
}

func (m *MockIResidentRepository) GetByID(arg0 uint) (*residentDomain.Resident, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*residentDomain.Resident)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockIResidentRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIResidentRepository)(nil).GetByID), arg0)
}

func (m *MockIResidentRepository) Update(arg0 *residentDomain.Resident) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockIResidentRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIResidentRepository)(nil).Update), arg0)
}

func (m *MockIResidentRepository) GetPhoneByPackageID(arg0 uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneByPackageID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockIResidentRepositoryMockRecorder) GetPhoneByPackageID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneByPackageID", reflect.TypeOf((*MockIResidentRepository)(nil).GetPhoneByPackageID), arg0)
}

func (m *MockIResidentRepository) GetPhoneByReservationID(arg0 uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneByReservationID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockIResidentRepositoryMockRecorder) GetPhoneByReservationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneByReservationID", reflect.TypeOf((*MockIResidentRepository)(nil).GetPhoneByReservationID), arg0)
}