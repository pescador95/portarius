// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.portarius.com/support",
            "email": "support@portarius.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates user and returns JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User login data",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token and user info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Creates a new user with the provided registration data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created user (password omitted)",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/inventory": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all inventory items with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "List all inventory items",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "name",
                            "quantity",
                            "created_at"
                        ],
                        "type": "string",
                        "description": "Sort field",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "asc",
                        "description": "Sort order",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Inventory"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new inventory item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Create a new inventory item",
                "parameters": [
                    {
                        "description": "Inventory item",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Inventory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Inventory"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/inventory/import-pets": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Import pets from CSV file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Import cars from CSV",
                "parameters": [
                    {
                        "type": "file",
                        "description": "CSV file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/inventory/inventory-types": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List avaliable inventory types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "List inventory types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.InventoryType"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/inventory/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get inventory item by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Get inventory item by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inventory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Inventory"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an inventory item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Update an inventory item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inventory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Inventory item",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Inventory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Inventory"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an inventory item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Delete an inventory item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inventory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/package": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all package items with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Package"
                ],
                "summary": "List all package items",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "description",
                            "status",
                            "quantity",
                            "created_at"
                        ],
                        "type": "string",
                        "description": "Sort field",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "asc",
                        "description": "Sort order",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Package"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new package item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Package"
                ],
                "summary": "Create a new package item",
                "parameters": [
                    {
                        "description": "Package item",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Package"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Package"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/package/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List avaliable package status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Package"
                ],
                "summary": "List package status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.PackageStatus"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/package/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get package item by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Package"
                ],
                "summary": "Get package item by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Package"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an package item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Package"
                ],
                "summary": "Update an package item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Package item",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Package"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Package"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an package item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Package"
                ],
                "summary": "Delete an package item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/package/{id}/deliver": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change the package status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Package"
                ],
                "summary": "Mark a package as delivered",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Package"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/package/{id}/lost": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change the package status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Package"
                ],
                "summary": "Mark a package as lost",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Package"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reminders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of all reminders with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "List all reminders",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by recipient",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "recipient",
                            "scheduled_at",
                            "sent_at",
                            "status",
                            "channel",
                            "created_at"
                        ],
                        "type": "string",
                        "description": "Sort field",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "asc",
                        "description": "Sort order",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reminder"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new reminder with recipient, scheduled time, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "Create a new reminder",
                "parameters": [
                    {
                        "description": "Reminder to create",
                        "name": "reminder",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Reminder"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Reminder"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reminders/channel/{channel}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of reminders filtered by channel",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "Get reminders by channel",
                "parameters": [
                    {
                        "enum": [
                            "WHATSAPP",
                            "EMAIL",
                            "SMS",
                            "TELEGRAM",
                            "INSTAGRAM",
                            "FACEBOOK",
                            "DISCORD"
                        ],
                        "type": "string",
                        "description": "Reminder channel",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reminder"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reminders/package/{packageID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a reminder linked to a specific package",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "Get reminder by package ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Package ID",
                        "name": "packageID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reminder"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/reminders/pending": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all reminders that are still pending",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "Get reminders with status PENDING",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reminder"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reminders/recipient/{recipient}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all reminders sent to a specific recipient",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "Get reminders by recipient",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipient",
                        "name": "recipient",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reminder"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reminders/reminderChannel": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all supported reminder channels",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "List all reminder channels",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/reminders/reminderStatus": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all possible reminder statuses",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "List all reminder statuses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/reminders/reservation/{reservationID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a reminder linked to a specific reservation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "Get reminder by reservation ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "reservationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reminder"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/reminders/status/{status}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of reminders filtered by status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "Get reminders by status",
                "parameters": [
                    {
                        "enum": [
                            "PENDING",
                            "SENT",
                            "FAILED",
                            "CANCELLED"
                        ],
                        "type": "string",
                        "description": "Reminder status",
                        "name": "status",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reminder"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reminders/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a single reminder by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "Get reminder by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reminder ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reminder"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update reminder fields like scheduled time, status, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "Update an existing reminder",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reminder ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated reminder",
                        "name": "reminder",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Reminder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reminder"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a reminder by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reminders"
                ],
                "summary": "Delete a reminder",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reminder ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations": {
            "get": {
                "description": "Retrieves a paginated list of all reservations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservations"
                ],
                "summary": "Get all reservations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reservation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new reservation with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservations"
                ],
                "summary": "Create a new reservation",
                "parameters": [
                    {
                        "description": "Reservation data",
                        "name": "reservation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/date-range": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all reservations between start_date and end_date (format: yyyy-MM-dd)",
                "tags": [
                    "Reservations"
                ],
                "summary": "Get reservations by date range",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date in format yyyy-MM-dd",
                        "name": "start_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date in format yyyy-MM-dd",
                        "name": "end_date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reservation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/import-salon": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Imports reservations data from a CSV file for salon spaces",
                "tags": [
                    "Reservations"
                ],
                "summary": "Import salon reservations from CSV",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/paymentMethods": {
            "get": {
                "description": "Returns the list of possible payment methods",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservations"
                ],
                "summary": "List all payment methods",
                "responses": {
                    "200": {
                        "description": "List of payment methods",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.PaymentMethod"
                            }
                        }
                    }
                }
            }
        },
        "/reservations/paymentStatuses": {
            "get": {
                "description": "Returns the list of possible payment statuses",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservations"
                ],
                "summary": "List all payment statuses",
                "responses": {
                    "200": {
                        "description": "List of payment statuses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.PaymentStatus"
                            }
                        }
                    }
                }
            }
        },
        "/reservations/reservationStatus": {
            "get": {
                "description": "Returns the list of possible reservation statuses",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservations"
                ],
                "summary": "List all reservation statuses",
                "responses": {
                    "200": {
                        "description": "List of reservation statuses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.ReservationStatus"
                            }
                        }
                    }
                }
            }
        },
        "/reservations/resident/{residentId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all reservations associated with a specific resident",
                "tags": [
                    "Reservations"
                ],
                "summary": "Get reservations by resident ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Resident ID",
                        "name": "residentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reservation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/space/{space}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all reservations for a specific space",
                "tags": [
                    "Reservations"
                ],
                "summary": "Get reservations by space type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Space type",
                        "name": "space",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reservation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/spaceTypes": {
            "get": {
                "description": "Returns the list of possible space types for reservations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservations"
                ],
                "summary": "List all space types",
                "responses": {
                    "200": {
                        "description": "List of space types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.SpaceType"
                            }
                        }
                    }
                }
            }
        },
        "/reservations/status/{status}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all reservations filtered by their status",
                "tags": [
                    "Reservations"
                ],
                "summary": "Get reservations by status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reservation status",
                        "name": "status",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reservation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/upcoming": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all upcoming reservations",
                "tags": [
                    "Reservations"
                ],
                "summary": "Get upcoming reservations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Reservation"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/{id}": {
            "get": {
                "description": "Retrieves a reservation based on its unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservations"
                ],
                "summary": "Get a reservation by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update reservation's time or description",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservations"
                ],
                "summary": "Update a reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated data",
                        "name": "reservation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a reservation by its ID",
                "tags": [
                    "Reservations"
                ],
                "summary": "Delete a reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/{id}/cancel": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel a reservation by setting its status to cancelled and adding a cancellation reason",
                "tags": [
                    "Reservations"
                ],
                "summary": "Cancel a reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cancellation body (only CancellationReason will be used)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/{id}/complete": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the reservation status to \"keys returned\" (complete)",
                "tags": [
                    "Reservations"
                ],
                "summary": "Mark reservation as complete",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/{id}/confirm": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the reservation status to confirmed",
                "tags": [
                    "Reservations"
                ],
                "summary": "Confirm a reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/{id}/confirm-payment": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Confirm the payment of a reservation, updating payment status, amount, date, and reservation status",
                "tags": [
                    "Reservations"
                ],
                "summary": "Confirm payment for a reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reservation payment details (payment_amount)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/{id}/return-keys": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks the keys as returned for a reservation and updates its status",
                "tags": [
                    "Reservations"
                ],
                "summary": "Mark reservation keys as returned",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reservations/{id}/take-keys": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks the keys as taken for a confirmed reservation and updates its status",
                "tags": [
                    "Reservations"
                ],
                "summary": "Mark reservation keys as taken",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reservation"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/residents/": {
            "get": {
                "description": "Retrieves a paginated list of residents. Use query params 'page' and 'pageSize' for pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Residents"
                ],
                "summary": "Get all residents with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of residents",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Resident"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Creates a new resident with the provided JSON body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Residents"
                ],
                "summary": "Create a new resident",
                "parameters": [
                    {
                        "description": "Resident data",
                        "name": "resident",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Resident"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Resident created",
                        "schema": {
                            "$ref": "#/definitions/domain.Resident"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/residents/import": {
            "post": {
                "description": "Imports residents data from a CSV file (implementation-specific).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Residents"
                ],
                "summary": "Import residents from CSV",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/residents/residentType": {
            "get": {
                "description": "Returns the list of possible resident types.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Residents"
                ],
                "summary": "List all resident types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.ResidentType"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/residents/{id}": {
            "get": {
                "description": "Retrieves a resident by their ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Residents"
                ],
                "summary": "Get resident by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Resident ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resident found",
                        "schema": {
                            "$ref": "#/definitions/domain.Resident"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "description": "Updates the resident with the given ID using the JSON body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Residents"
                ],
                "summary": "Update an existing resident",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Resident ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resident data",
                        "name": "resident",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Resident"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resident updated",
                        "schema": {
                            "$ref": "#/definitions/domain.Resident"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Deletes the resident with the specified ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Residents"
                ],
                "summary": "Delete a resident by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Resident ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "description": "Retrieves paginated list of users (passwords omitted).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieves user details by ID (password omitted).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "description": "Updates the user identified by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user (password omitted)",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Deletes user with the specified ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Inventory": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "inventory_type": {
                    "$ref": "#/definitions/domain.InventoryType"
                },
                "last_updated": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "domain.InventoryType": {
            "type": "string",
            "enum": [
                "CARRO",
                "MOTO",
                "BICICLETA",
                "SCOOTER",
                "PET"
            ],
            "x-enum-varnames": [
                "InventoryTypeCar",
                "InventoryTypeBike",
                "InventoryTypeBicycle",
                "InventoryTypeScooter",
                "InventoryTypePet"
            ]
        },
        "domain.Package": {
            "type": "object",
            "properties": {
                "delivered_at": {
                    "type": "string"
                },
                "delivered_to_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "received_at": {
                    "type": "string"
                },
                "resident_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/domain.PackageStatus"
                }
            }
        },
        "domain.PackageStatus": {
            "type": "string",
            "enum": [
                "PENDENTE",
                "ENTREGUE",
                "EXTRAVIADO"
            ],
            "x-enum-varnames": [
                "PackagePending",
                "PackageDelivered",
                "PackageLost"
            ]
        },
        "domain.PaymentMethod": {
            "type": "string",
            "enum": [
                "PIX",
                "BOLETO"
            ],
            "x-enum-varnames": [
                "PaymentMethodPix",
                "PaymentMethodBoleto"
            ]
        },
        "domain.PaymentStatus": {
            "type": "string",
            "enum": [
                "PAGAMENTO_PENDENTE",
                "PAGO",
                "REEMBOLSADO"
            ],
            "x-enum-varnames": [
                "PaymentPending",
                "PaymentPaid",
                "PaymentRefunded"
            ]
        },
        "domain.Reminder": {
            "type": "object",
            "properties": {
                "channel": {
                    "$ref": "#/definitions/domain.ReminderChannel"
                },
                "package_id": {
                    "type": "integer"
                },
                "recipient": {
                    "type": "string"
                },
                "reservation_id": {
                    "type": "integer"
                },
                "scheduled_at": {
                    "type": "string"
                },
                "sent_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/domain.ReminderStatus"
                }
            }
        },
        "domain.ReminderChannel": {
            "type": "string",
            "enum": [
                "WHATSAPP",
                "EMAIL",
                "SMS",
                "TELEGRAM",
                "INSTAGRAM",
                "FACEBOOK",
                "DISCORD"
            ],
            "x-enum-varnames": [
                "ReminderChannelWhatsApp",
                "ReminderChannelEmail",
                "ReminderChannelSMS",
                "ReminderChannelTelegram",
                "ReminderChannelInstagram",
                "ReminderChannelFacebook",
                "ReminderChannelDiscord"
            ]
        },
        "domain.ReminderStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "SENT",
                "FAILED",
                "CANCELLED"
            ],
            "x-enum-varnames": [
                "ReminderStatusPending",
                "ReminderStatusSent",
                "ReminderStatusFailed",
                "ReminderStatusCancelled"
            ]
        },
        "domain.Reservation": {
            "type": "object",
            "properties": {
                "cancellation_reason": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "keys_returned_at": {
                    "type": "string"
                },
                "keys_taken_at": {
                    "type": "string"
                },
                "payment_amount": {
                    "type": "number"
                },
                "payment_date": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/domain.PaymentMethod"
                },
                "payment_status": {
                    "$ref": "#/definitions/domain.PaymentStatus"
                },
                "resident_id": {
                    "type": "integer"
                },
                "space": {
                    "$ref": "#/definitions/domain.SpaceType"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/domain.ReservationStatus"
                }
            }
        },
        "domain.ReservationStatus": {
            "type": "string",
            "enum": [
                "PENDENTE",
                "CONFIRMADA",
                "CANCELADA",
                "CHAVES_RETIRADAS",
                "CHAVES_DEVOLVIDAS"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusConfirmed",
                "StatusCancelled",
                "StatusKeysTaken",
                "StatusKeysReturned"
            ]
        },
        "domain.Resident": {
            "type": "object",
            "properties": {
                "apartment": {
                    "type": "string"
                },
                "block": {
                    "type": "string"
                },
                "document": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "resident_type": {
                    "$ref": "#/definitions/domain.ResidentType"
                }
            }
        },
        "domain.ResidentType": {
            "type": "string",
            "enum": [
                "INQUILINO",
                "PROPRIETARIO",
                "KRUM",
                "NAO_RESIDENTE"
            ],
            "x-enum-varnames": [
                "Tenant",
                "Owner",
                "Krum",
                "NotResident"
            ]
        },
        "domain.SpaceType": {
            "type": "string",
            "enum": [
                "SALAO_1",
                "SALAO_2"
            ],
            "x-enum-varnames": [
                "Salon1",
                "Salon2"
            ]
        },
        "domain.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "user.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{"http", "https"},
	Title:            "Portarius API",
	Description:      "API for managing a package delivery system in a residential building",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
